{"name":"Esgrimajs","tagline":"EsgrimaJS - Distributed Javascript Test Runner","body":"![Logo](docs/logo_small.png)\r\n# EsgrimaJS: Distributed Javascript Test Runner for Front-end Web Applications\r\n\r\n\r\n\r\nDo you need to do Javascript testing in a distributed way? With\r\nmultiple windows, multiple screen, remote places or whatever?\r\nAnd all the tests need to communicate? Use this framework!\r\n\r\n* Worked in distributed web applications - easy way to communicate between them. \r\n* Supports UI Tests. \r\n* You can execute the already exists Unit Tests for the modules.\r\n* Define a pipeline with the tests between different enviroments. \r\n* Loop the pipeline and use the tests as a \"stress-tests\" also.\r\n* Test in chrome app?\r\n* Test in the mobile enviroments? \r\n* Any other web sandbox?\r\n\r\n## Why we built another framework?\r\n\r\n\r\nCommon, there are a lot of frameworks to test javascript. And it is not\r\nanother one. We take advantage of the tests frameworks that already exists.\r\n\r\nBut is it a test runner? Yes. And yes, we also take advantage of what exists in\r\nthe moment. And we hope we can propose an integration of this one with\r\na most broader and used framework by the community (we are quite new, and nobody\r\nknows it.)\r\n\r\nEverything started, because we have to test a chrome app (see Chrome App) with\r\nmulti monitor. Yes, you click a button in one screen, an action happened in\r\nanother monitor. And yes, we need also test interface. The most impartant issue that we face, was related with testing in\r\nthe same application, different things, and how can we execute an operation\r\nin one window and check if the value changed in other one (tipically multi monitor\r\nscenario).\r\n\r\nLet's mix it together, and do a real test framework for javascript and\r\nweb browser framework. We do not real Web Drivers, or whatever. We are embeeded on\r\nthe application.\r\n\r\nAnother clear advantage, is the possibility to run any javascript code. While in Nightwatch.js you\r\nare limited to their API to run your interface tests, here, you can handle javascript triggers\r\nand do it in a different way, like for instance, run unit tests and so on. \r\n\r\nThe philosophy of EsgrimaJS is totally different from the others. The key idea is each test module \r\nwill belong to a group. And each test will run in a group, which mean that it is in\r\none machine or one thousand machines.\r\n\r\nFinally, did you plan interface tests in Mobile devices? Do you want to do? No idea? EsgrimaJS solves it for you!\r\n\r\n## How to use?\r\n\r\n- [How To Install and Use?](docs/HOWTO.md)\r\n\r\n\r\n\r\n## Architecture\r\n\r\n![Architecture](docs/arch.jpg)\r\n\r\n- [Pipeline](docs/Pipeline.md)\r\n- [Communication](docs/Communication.md)\r\n\r\n\r\n## Technology\r\n\r\nThe server and client are built in Javascript mainly using ECMAScript 6. The websockets is based on socket.io. \r\nThe framework can works over HTTP or HTTPS.\r\n\r\n## Known issues\r\n\r\n- Clock: how to syncrhonize the clock between several tests running?\r\n- How to access the external components in Javascript AMD? They do not have access to \r\nall components, so it is really hard to get access to them. It is possible to instance\r\nnew components.\r\n\r\n\r\n### Ubuntu workaround\r\n\r\n\r\n```\r\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p\r\n```\r\n\r\n### Windows 8 isues\r\n\r\n\r\nFollow the same recomendations: https://github.com/TooTallNate/node-gyp#installation\r\n\r\n\r\n# Authorship & Inspiring \r\n\r\n- Luís A. Bastião Silva <bastiao@ua.pt>\r\n- Ideas/Contributions from: Eriksson Monteiro and David Campos.\r\n\r\n\r\nMany of the philosofy is taken from Karma. So kudos for Karma and for\r\nVojtech Jína, that are the author of the master thesis.\r\n\r\nSo, if something is not good with licenses or code or whatever, feel free\r\nto let me know, and will fix it of course.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}